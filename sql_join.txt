Query-uri cu join-uri

1.

Table: Person

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| PersonId    | int     |
| FirstName   | varchar |
| LastName    | varchar |
+-------------+---------+
PersonId is the primary key column for this table.
Table: Address

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| AddressId   | int     |
| PersonId    | int     |
| City        | varchar |
| State       | varchar |
+-------------+---------+
AddressId is the primary key column for this table.
 

Write a SQL query for a report that provides the following information for each person in the Person table, regardless if there is an address for each of those people:

FirstName, LastName, City, State

Rezolvare:

select FirstName, LastName, City, State
from Person left join Address
on Person.PersonId = Address.PersonId;


2.

Enunt:

Given the CITY and COUNTRY tables, query the sum of the populations of all cities where the CONTINENT is 'Asia'.

Note: CITY.CountryCode and COUNTRY.Code are matching key columns.



Rezolvare:

SELECT SUM(CITY.POPULATION) 
FROM CITY JOIN COUNTRY
ON CITY.COUNTRYCODE = COUNTRY.CODE
WHERE COUNTRY.CONTINENT = 'Asia';


3.

Enunt:

Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'.

Note: CITY.CountryCode and COUNTRY.Code are matching key columns.


REZOLVARE:

SELECT CITY.NAME
FROM CITY JOIN COUNTRY
ON CITY.CountryCode = COUNTRY.Code
WHERE CONTINENT = "Africa";


4.

Enunt:

Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) and their respective average city populations (CITY.Population) rounded down to the nearest integer.

Note: CITY.CountryCode and COUNTRY.Code are matching key columns.


REZOLVARE: 

select COUNTRY.CONTINENT, FLOOR(AVG(CITY.Population))
FROM COUNTRY JOIN CITY
ON CITY.CountryCode = COUNTRY.Code
GROUP BY COUNTRY.CONTINENT;

---------------------------------------------------------

SAPTAMANA 2:

1. 

You are given two tables: Students and Grades. Students contains three columns ID, Name and Marks.



Grades contains the following data:



Ketty gives Eve a task to generate a report containing three columns: Name, Grade and Mark. Ketty doesn't want the NAMES of those students who received a grade lower than 8. The report must be in descending order by grade -- i.e. higher grades are entered first. If there is more than one student with the same grade (8-10) assigned to them, order those particular students by their name alphabetically. Finally, if the grade is lower than 8, use "NULL" as their name and list them by their grades in descending order. If there is more than one student with the same grade (1-7) assigned to them, order those particular students by their marks in ascending order.

Write a query to help Eve.

REZOLVARE:

select if(grade < 8, NULL, name) , grade, marks
from students join grades
where marks between min_mark and max_mark
order by grade desc, name, marks;

W3RESOURCE - exercitii:

1.

Write a SQL statement to prepare a list with salesman name, customer name and their cities for the salesmen and customer who belongs to the same city.

REZOLVARE:

SELECT NAME, CUST_NAME, SALESMAN.CITY
FROM SALESMAN JOIN CUSTOMER
ON SALESMAN.SALESMAN_ID = CUSTOMER.SALESMAN_ID
WHERE SALESMAN.CITY = CUSTOMER.CITY;

(NU AM INTELES CEVA)!



2.

select ord_no, purch_amt, cust_name, city
from orders, customer
WHERE orders.customer_id=customer.customer_id and purch_amt between 500 and 2000;

3.

SELECT CUST_NAME, NAME
FROM CUSTOMER, SALESMAN
WHERE CUSTOMER.SALESMAN_ID = SALESMAN.SALESMAN_ID;

4.

SELECT CUST_NAME, NAME
FROM CUSTOMER, SALESMAN
WHERE CUSTOMER.SALESMAN_ID = SALESMAN.SALESMAN_ID
AND COMMISSION > 0.12;

5. 

SELECT CUST_NAME, NAME
FROM CUSTOMER JOIN SALESMAN
ON CUSTOMER.SALESMAN_ID = SALESMAN.SALESMAN_ID
WHERE CUSTOMER.CITY != SALESMAN.CITY AND COMMISSION > 0.12; 

6.

SELECT ord_no, ord_date, purch_amt, cust_name, name, commission
from orders join customer on orders.customer_id = customer.customer_id
join salesman on customer.salesman_id = salesman.salesman_id;

8.

SELECT cust_name
from customer left join salesman
on customer.salesman_id = salesman.salesman_id
order by customer_id;

9.

SELECT cust_name
from customer left join salesman
on customer.salesman_id = salesman.salesman_id
where grade < 300
order by customer_id;

10.

SELECT cust_name, city, ord_no, ord_date, purch_amt
FROM customer LEFT JOIN orders
ON customer.customer_id = orders.customer_id
ORDER BY ord_date asc;

11. 

SELECT cust_name, customer.city, ord_no, ord_date, purch_amt, name, commission
FROM customer LEFT JOIN orders
ON customer.customer_id= orders.customer_id
LEFT JOIN salesman
ON orders.salesman_id = salesman.salesman_id;

12. 

SELECT salesman.salesman_id, name, cust_name
FROM customer RIGHT JOIN salesman
ON customer.salesman_id = salesman.salesman_id
ORDER BY salesman_id;

13.

SELECT name, cust_name, ord_no
FROM salesman LEFT JOIN customer
ON salesman.salesman_id = customer.salesman_id
LEFT JOIN orders
ON customer.customer_id = orders.customer_id;

14.

SELECT name, cust_name, ord_no, purch_amt, grade
FROM salesman LEFT JOIN customer
ON salesman.salesman_id = customer.salesman_id
LEFT JOIN orders
ON customer.customer_id = orders.customer_id
WHERE purch_amt >= 2000 AND grade IS NOT NULL;

INTREBARE - ??

15. 

SELECT cust_name, city, ord_no, ord_date, purch_amt
FROM customer RIGHT JOIN orders
ON customer.customer_id = orders.customer_id;

INTREBARE - ??

----------------------------------------------------
----------------------------------------------------

SUBQUERY:

1.

SELECT *
FROM orders
WHERE salesman_id = (SELECT salesman_id FROM salesman WHERE name = 'Paul Adam');

2.

SELECT *
FROM orders
WHERE salesman_id = (SELECT salesman_id FROM salesman WHERE city = 'London'); 

3.

SELECT * 
FROM orders
WHERE salesman_id = (SELECT salesman_id FROM orders WHERE customer_id = 3007);
















